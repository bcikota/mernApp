{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","title","body","state","setState","posts","setPosts","useEffect","getBlogPosts","axios","url","method","then","response","data","console","log","catch","alert","handleChange","target","name","value","prevValue","className","onSubmit","e","preventDefault","payload","handleSubmit","type","placeholder","onChange","cols","rows","length","map","post","index","displayBlogPost","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAkHeA,EA/GH,WAAO,IAAD,EAEUC,mBACxB,CACEC,MAAO,GACPC,KAAM,KALM,mBAETC,EAFS,KAEFC,EAFE,OASUJ,mBAAS,IATnB,mBASTK,EATS,KASFC,EATE,KAWhBC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAe,WACnBC,IAAM,CACJC,IAAK,OACLC,OAAQ,QAEPC,MAAK,SAACC,GAELP,GAAS,WACP,OAAO,YAAIO,EAASC,SAEtBC,QAAQC,IAAI,2BACZD,QAAQC,IAAIH,EAASC,SAEtBG,OAAM,WACLC,MAAM,8BAINC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACdC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MAEdlB,GAAS,SAACmB,GACR,OAAO,2BACFA,GADL,kBAEGF,EAAOC,OAGZP,QAAQC,IAAIb,IAqCd,OACE,sBAAKqB,UAAU,MAAf,UACE,mDACA,uBAAMC,SAAU,SAAAC,GAAC,OArCA,SAACA,GACpBA,EAAEC,iBACF,IAAMC,EAAU,CACd3B,MAAOE,EAAMF,MACbC,KAAMC,EAAMD,MAGdO,IAAM,CACJC,IAAK,YACLC,OAAQ,OACRG,KAAMc,IAELhB,MAAK,WACJR,EAAS,CACPH,MAAO,GACPC,KAAM,KAERa,QAAQC,IAAI,oCACZR,OAEDS,OAAM,kBAAMF,QAAQC,IAAI,4BAiBJa,CAAaH,IAAlC,UACE,qBAAKF,UAAU,aAAf,SACE,uBACEM,KAAK,OACLT,KAAK,QACLU,YAAY,QACZT,MAAOnB,EAAMF,MACb+B,SAAU,SAAAN,GAAC,OAAIP,EAAaO,QAGhC,qBAAKF,UAAU,aAAf,SACE,0BACEH,KAAK,OACLU,YAAY,OACZE,KAAK,KACLC,KAAK,KACLZ,MAAOnB,EAAMD,KACb8B,SAAU,SAAAN,GAAC,OAAIP,EAAaO,QAGhC,+CAEF,qBAAKF,UAAU,YAAf,SApCoB,SAACnB,GACvB,OAAIA,EAAM8B,OAEH9B,EAAM+B,KAAI,SAACC,EAAMC,GAAP,OACf,sBAAiBd,UAAU,qBAA3B,UACE,6BAAKa,EAAKpC,QACV,4BAAIoC,EAAKnC,SAFDoC,MAHa,KAoCpBC,CAAgBlC,SChGVmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1814da39.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nconst App = () => {\n\n  const [state, setState] = useState(\n    {\n      title: '',\n      body: ''\n    }\n  );\n\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    getBlogPosts();\n  }, []);\n\n  const getBlogPosts = () => {\n    axios({\n      url: '/api',\n      method: 'GET'\n    })\n      .then((response) => {\n\n        setPosts(() => {\n          return [...response.data]\n        });\n        console.log('Data has been received!');\n        console.log(response.data);\n      })\n      .catch(() => {\n        alert('Error retrieving data!');\n      });\n  };\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    setState((prevValue) => {\n      return {\n        ...prevValue,\n        [name]: value\n      }\n    });\n    console.log(state);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const payload = {\n      title: state.title,\n      body: state.body\n    }\n\n    axios({\n      url: '/api/save',\n      method: 'POST',\n      data: payload\n    })\n      .then(() => {\n        setState({\n          title: '',\n          body: ''\n        });\n        console.log('Data has been sent to the server');\n        getBlogPosts();\n      })\n      .catch(() => console.log('Internal server error'));\n  }\n\n  const displayBlogPost = (posts) => {\n    if(!posts.length) return null;\n\n    return posts.map((post, index) => (\n      <div key={index} className=\"blog-post__display\">\n        <h3>{post.title}</h3>\n        <p>{post.body}</p>\n      </div>\n    ));\n  };\n\n  return (\n    <div className=\"app\">\n      <h2>Welcome to my App</h2>\n      <form onSubmit={e => handleSubmit(e)}>\n        <div className=\"form-input\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            value={state.title}\n            onChange={e => handleChange(e)}\n          />\n        </div>\n        <div className=\"form-input\">\n          <textarea\n            name=\"body\"\n            placeholder=\"body\"\n            cols=\"30\"\n            rows=\"10\"\n            value={state.body}\n            onChange={e => handleChange(e)}\n          ></textarea>\n        </div>\n        <button>Submit</button>\n      </form>\n      <div className=\"blog-post\">\n        {displayBlogPost(posts)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}